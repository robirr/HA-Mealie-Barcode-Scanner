#######################################################################################################    
# ESP32 and GM67 Barcode Scanner
#######################################################################################################

# IMPORTANT! Replace the hashed values with suitable API keys and passwords

esphome:
  name: barcode-scanner
  friendly_name: Barcode Scanner

esp32:
  board: firebeetle32
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "############################################"
  actions:
    # For now, when a product is identified it just logs it to the debug stream but this can be adapted to write to product to a screen
    - action: product_identified
      variables:
        product: string
      then:
        - logger.log: 
            level: INFO
            format: "Returned Product: %s"
            args: [ 'product.c_str()' ] 
  
ota:
  - platform: esphome
    password: "################################"    

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Barcode Fallback Hotspot"
    password: "##########"

captive_portal:

#######################################################################################################    
# CONFIG THE DEVICE
#######################################################################################################

# UART
uart:
  # UART for the GM67 barcode scanner
  - id: scanner
    baud_rate: 9600
    tx_pin: ${tx_pin}
    rx_pin: ${rx_pin}
    debug:
      direction: RX
      dummy_receiver: true
      after:
        delimiter: "\r"
      sequence:
        - if: # If a 13 or 8 digit numeric barcode was canned
            condition:
              lambda: |-
                std::string str(bytes.begin(), bytes.end()); 
                if ( 
                  (strlen(str.c_str()) == 14 and str.substr(0, 13).find_first_not_of("0123456789") == std::string::npos) or // is 13 digit EAN-13 barcode
                  (strlen(str.c_str()) == 13 and str.substr(0, 12).find_first_not_of("0123456789") == std::string::npos) or // is 12 digit UPC-A barcode
                  (strlen(str.c_str()) == 9 and str.substr(0, 8).find_first_not_of("0123456789") == std::string::npos) // is 8 digit EAN-8 or UPC-E barcode
                ) { 
                  return true; 
                } else {
                  return false;
                } 
            then:
              # Log the received barcode and update the last_barcode and last_scan entities
              - lambda: |-
                  UARTDebug::log_string(direction, bytes);
                  std::string str(bytes.begin(), bytes.end());
                  id(last_barcode).publish_state(str.c_str()); 
                  id(last_scan).trigger("barcode_scanned"); 
              # Send a HA event with the scanned product barcode
              - homeassistant.event:
                  event: esphome.barcode_scan
                  data_template: 
                    barcode: "{{ scanned_barcode }}"
                  variables:
                    scanned_barcode: !lambda |-
                        std::string str(bytes.begin(), bytes.end()); 
                        return str.c_str(); 
        - if: # If a special QR code was scanned which contains text starting "GENERIC:"
            condition:
              lambda: |-
                std::string str(bytes.begin(), bytes.end());
                if (str.substr(0, 8) == "GENERIC:") { // starts with "GENERIC:"
                  return true; 
                } else {
                  return false;
                } 
            then:
              # Log the received barcode and update the last_barcode and last_scan entities
              - lambda: |-
                  UARTDebug::log_string(direction, bytes);
                  std::string str(bytes.begin(), bytes.end());
                  id(last_barcode).publish_state(str.substr(8).c_str()); // Get rid of the "GENERIC:" from the front
                  id(last_scan).trigger("barcode_scanned"); 
              # Send a HA event with the scanned product barcode
              - homeassistant.event:
                  event: esphome.generic_barcode_scan
                  data_template: 
                    product: "{{ scanned_product }}"
                  variables:
                    scanned_product: !lambda |-
                        std::string str(bytes.begin(), bytes.end()); 
                        return str.substr(8).c_str(); 

# Text Sensor
text_sensor:
  # # Provided for diagnostic purposes only. You should use the HA event "esphome.barcode_scan" triggered when a scan is performed
  - platform: template
    id: last_barcode
    name: Last Barcode
    icon: mdi:barcode
    entity_category: DIAGNOSTIC
    disabled_by_default: true

# Event
event:
  # Provided for diagnostic purposes only. You should use the HA event "esphome.barcode_scan" triggered when a scan is performed
  - platform: template
    name: "Last Scan"
    id: "last_scan"
    icon: mdi:barcode-scan
    entity_category: DIAGNOSTIC
    disabled_by_default: true
    event_types:
      - "barcode_scanned"

# Select
select:
  # The scanning trigger mode of the GM67
  - platform: template
    name: "Trigger Mode"
    id: scan_mode
    optimistic: true
    icon: mdi:auto-mode
    entity_category: CONFIG
    options:
      - Button Holding
      - Button Trigger
      - Continuous Scanning
      - Automatic Induction
      - Host
    initial_option: Automatic Induction
    restore_value: true
    on_value:
      - if:
          condition:
            lambda: 'if (x == "Button Holding") { return true; } else { return false; }'
          then:
            - uart.write: 
                id: scanner
                data: [0x07, 0xC6, 0x04, 0x08, 0x00, 0x8A, 0x00, 0xFE, 0x9D]
      - if:
          condition:
            lambda: 'if (x == "Button Trigger") { return true; } else { return false; }'
          then:
            - uart.write: 
                id: scanner
                data: [0x07, 0xC6, 0x04, 0x08, 0x00, 0x8A, 0x02, 0xFE, 0x9B]
      - if:
          condition:
            lambda: 'if (x == "Continuous Scanning") { return true; } else { return false; }'
          then:
            - uart.write: 
                id: scanner
                data: [0x07, 0xC6, 0x04, 0x08, 0x00, 0x8A, 0x04, 0xFE, 0x99]
      - if:
          condition:
            lambda: 'if (x == "Automatic Induction") { return true; } else { return false; }'
          then:
            - uart.write: 
                id: scanner
                data: [0x07, 0xC6, 0x04, 0x08, 0x00, 0x8A, 0x09, 0xFE, 0x94]
      - if:
          condition:
            lambda: 'if (x == "Host") { return true; } else { return false; }'
          then:
            - uart.write: 
                id: scanner
                data: [0x07, 0xC6, 0x04, 0x08, 0x00, 0x8A, 0x08, 0xFE, 0x95]
  # Buzzer Volume
  - platform: template
    name: "Buzzer Volume"
    id: buzzer_volume
    optimistic: true
    icon: mdi:volume-high
    entity_category: CONFIG
    options:
      - 'Off'
      - Low
      - Medium
      - High
    initial_option: Medium
    restore_value: true
    on_value:
      - if: # Off
          condition:
            lambda: 'if (x == "Off") { return true; } else { return false; }'
          then:
            - uart.write: # Turn off
                id: scanner
                data: [0x07, 0xC6, 0x04, 0x08, 0x00, 0x38, 0x00, 0xFE, 0xEF]
      - if: # Low
          condition:
            lambda: 'if (x == "Low") { return true; } else { return false; }'
          then:
            - uart.write: # Turn on
                id: scanner
                data: [0x07, 0xC6, 0x04, 0x08, 0x00, 0x38, 0x01, 0xFE, 0xEE] 
            - uart.write: # Set low
                id: scanner
                data: [0x07, 0xC6, 0x04, 0x08, 0x00, 0x8C, 0x02, 0xFE, 0x99]
      - if: # Medium
          condition:
            lambda: 'if (x == "Medium") { return true; } else { return false; }'
          then:
            - uart.write: # Turn on
                id: scanner
                data: [0x07, 0xC6, 0x04, 0x08, 0x00, 0x38, 0x01, 0xFE, 0xE]
            - uart.write: # Set medium
                id: scanner
                data: [0x07, 0xC6, 0x04, 0x08, 0x00, 0x8C, 0x01, 0xFE, 0x9A]
      - if: # High
          condition:
            lambda: 'if (x == "High") { return true; } else { return false; }'
          then:
            - uart.write: # Turn on
                id: scanner
                data: [0x07, 0xC6, 0x04, 0x08, 0x00, 0x38, 0x01, 0xFE, 0xE]
            - uart.write: # Set high
                id: scanner
                data: [0x07, 0xC6, 0x04, 0x08, 0x00, 0x8C, 0x00, 0xFE, 0x9B]
  # Scanning Light
  - platform: template
    name: "Scanning Light"
    id: scanning_light
    optimistic: true
    icon: mdi:lightbulb-on
    entity_category: CONFIG
    options:
      - On When Reading
      - Always On
      - Always Off
    initial_option: On When Reading
    restore_value: true
    on_value:
      - if: # On When Reading
          condition:
            lambda: 'if (x == "On When Reading") { return true; } else { return false; }'
          then:
            - uart.write: 
                id: scanner
                data: [0x08, 0xC6, 0x04, 0x08, 0x00, 0xF2, 0x02, 0x00, 0xFE, 0x32]
      - if: # Always On
          condition:
            lambda: 'if (x == "Always On") { return true; } else { return false; }'
          then:
            - uart.write: 
                id: scanner
                data: [0x08, 0xC6, 0x04, 0x08, 0x00, 0xF2, 0x02, 0x01, 0xFE, 0x31]
      - if: # Always Off
          condition:
            lambda: 'if (x == "Always Off") { return true; } else { return false; }'
          then:
            - uart.write: 
                id: scanner
                data: [0x08, 0xC6, 0x04, 0x08, 0x00, 0xF2, 0x02, 0x02, 0xFE, 0x30]
  # Collimation
  - platform: template
    name: "Collimation"
    id: collimation
    optimistic: true
    icon: mdi:line-scan
    entity_category: CONFIG
    options:
      - On When Reading
      - Always On
      - Always Off
    initial_option: On When Reading
    restore_value: true
    on_value:
      - if: # On When Reading
          condition:
            lambda: 'if (x == "On When Reading") { return true; } else { return false; }'
          then:
            - uart.write: 
                id: scanner
                data: [0x08, 0xC6, 0x04, 0x08, 0x00, 0xF2, 0x03, 0x00, 0xFE, 0x31]
      - if: # Always On
          condition:
            lambda: 'if (x == "Always On") { return true; } else { return false; }'
          then:
            - uart.write: 
                id: scanner
                data: [0x08, 0xC6, 0x04, 0x08, 0x00, 0xF2, 0x03, 0x01, 0xFE, 0x30]
      - if: # Always Off
          condition:
            lambda: 'if (x == "Always Off") { return true; } else { return false; }'
          then:
            - uart.write: 
                id: scanner
                data: [0x08, 0xC6, 0x04, 0x08, 0x00, 0xF2, 0x03, 0x02, 0xFE, 0x2F]
  # Same Code Delay
  - platform: template
    name: "Same Code Delay"
    id: same_code_delay
    optimistic: true
    icon: mdi:repeat-variant
    entity_category: CONFIG
    options:
      - 0.5s
      - 1s
      - 3s
      - 5s
      - 7s 
      - No Repeat
    initial_option: 3s
    restore_value: true
    on_value:
      - if: # 0.5s
          condition:
            lambda: 'if (x == "0.5s") { return true; } else { return false; }'
          then:
            - uart.write: 
                id: scanner
                data: [0x08, 0xC6, 0x04, 0x08, 0x00, 0xF3, 0x03, 0x05, 0xFE, 0x2B]
      - if: # 1s
          condition:
            lambda: 'if (x == "1s") { return true; } else { return false; }'
          then:
            - uart.write: 
                id: scanner
                data: [0x08, 0xC6, 0x04, 0x08, 0x00, 0xF2, 0xC9, 0x01, 0xFD, 0x6A]
      - if: # 3s
          condition:
            lambda: 'if (x == "3s") { return true; } else { return false; }'
          then:
            - uart.write: 
                id: scanner
                data: [0x08, 0xC6, 0x04, 0x08, 0x00, 0xF2, 0xC9, 0x03, 0xFD, 0x68]
      - if: # 5s
          condition:
            lambda: 'if (x == "5s") { return true; } else { return false; }'
          then:
            - uart.write: 
                id: scanner
                data: [0x08, 0xC6, 0x04, 0x08, 0x00, 0xF2, 0xC9, 0x05, 0xFD, 0x66]
      - if: # 7s
          condition:
            lambda: 'if (x == "7s") { return true; } else { return false; }'
          then:
            - uart.write: 
                id: scanner
                data: [0x08, 0xC6, 0x04, 0x08, 0x00, 0xF2, 0xC9, 0x07, 0xFD, 0x64]
      - if: # No Repeat
          condition:
            lambda: 'if (x == "No Repeat") { return true; } else { return false; }'
          then:
            - uart.write: 
                id: scanner
                data: [0x08, 0xC6, 0x04, 0x08, 0x00, 0xF2, 0xC9, 0x09, 0xFD, 0x62]

switch:  
  # Collimation Flashing
  - platform: template
    name: "Collimation Flashing"
    id: collimation_flashing
    optimistic: true
    icon: mdi:line-scan
    entity_category: CONFIG
    restore_mode : RESTORE_DEFAULT_ON 
    turn_on_action:
      - uart.write: 
          id: scanner
          data: [0x08, 0xC6, 0x04, 0x08, 0x00, 0xF2, 0xB8, 0x00, 0xFD, 0x7C]
    turn_off_action:
      - uart.write: 
          id: scanner
          data: [0x08, 0xC6, 0x04, 0x08, 0x00, 0xF2, 0xB8, 0x01, 0xFD, 0x7B]
  # Scanning Enabled
  - platform: template
    name: "Scanning Enabled"
    id: scanning_enable
    optimistic: true
    icon: mdi:barcode-off
    entity_category: CONFIG
    restore_mode : RESTORE_DEFAULT_ON 
    turn_on_action:
      - uart.write: 
          id: scanner
          data: [0x04, 0xE9, 0x04, 0x00, 0xFF, 0x0F]
    turn_off_action:
      - uart.write: 
          id: scanner
          data: [0x04, 0xEA, 0x04, 0x00, 0xFF, 0x0E]

#######################################################################################################
